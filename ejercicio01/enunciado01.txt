"""1. Ordenación por inserción dicotómica
Sea t una tabla de una sola línea (vector) de elementos de un tipo T que derivan de COMPARABLE, y que hay que ordenar en orden creciente. Cada elemento está insertado en su lugar dentro del resultado que se ha de obtener buscando su posición de inserción mediante el algoritmo dicotomía estudiado en el capítulo «Iteración».

Ejercicio 4: Ordenación por inserción dicotómica

Sea t una tabla de una sola línea donde los componentes son de tipo T images/flechedroite.png COMPARABLE.
1. Escribir primero las especificaciones del algoritmo que no usa la ayuda de otra tabla para calcular su resultado.
Así, los elementos de t están «ordenados en su lugar». Cuidar especialmente la precondición y la postcondición; no son fáciles de obtener, pero proporcionan una guía útil para la construcción del algoritmo.

2. Desarrollar el análisis completo de la solución retenida.
En la segunda estrategia de resolución, se define primero una tabla r inicialmente vacía con el mismo cardinal que t. Esta vez se inserta una copia de cada componente t «en su lugar» en r, buscando su posición, como en la primera estrategia que hemos visto antes.

3. Desarrollar este algoritmo nuevo.
Este ejercicio es difícil, constituye un buen ejemplo de análisis/concepción guiada por las especificaciones. Por motivos de espacio y de legibilidad, las soluciones se estudian detalladamente en el archivo disponible para descargar desde la página Información."""

Entrada:
t: TABLA[T --> COMPARABLE]
limite_inferior: ENTERO
limite_superior: ENTERO
mitad: ENTERO

precondicion:
limite_inferior < limite_superior
mitad = t[]


realización:
elemento: t[0]


Función insercion_binaria(lista)
    Para i desde 1 hasta longitud(lista)-1
        clave = lista[i]
        // Encuentra la posición correcta para insertar la clave en la lista ordenada
        posición = busqueda_binaria(lista, clave, 0, i-1)
        // Desplaza los elementos para hacer espacio para la clave en la posición correcta
        Para j desde i hasta posición+1 con incremento -1
            lista[j] = lista[j-1]
        lista[posición] = clave
    Fin Para
    Devolver lista
Fin Función

Función busqueda_binaria(lista, clave, inicio, fin)
    Si inicio >= fin entonces
        Si lista[inicio] > clave entonces
            Devolver inicio
        Sino
            Devolver inicio+1
    Fin Si
    mitad = (inicio + fin) / 2
    Si lista[mitad] > clave entonces
        Devolver busqueda_binaria(lista, clave, inicio, mitad-1)
    Sino Si lista[mitad] < clave entonces
        Devolver busqueda_binaria(lista, clave, mitad+1, fin)
    Sino
        Devolver mitad
    Fin Si
Fin Función

